generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// BETTER AUTH MODELS
// ============================================

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Better Auth relations
  sessions Session[]
  accounts Account[]

  // Your app fields
  username String?  @unique
  role     UserRole @default(WORKER)
  isActive Boolean  @default(true)

  // Order relations
  createdOrders Order[] @relation("CreatedBy")

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String? // Better Auth stores hashed password here
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  WORKER
}

// ============================================
// ORDER MODEL
// ============================================

model Order {
  id          String @id @default(cuid())
  orderNumber String @unique // Auto-generated: ORD-2025-0001

  // CSV: NO, SW columns
  rowNumber Int? // Original row number from CSV
  swCode    String? // SW identifier from CSV

  // CSV: Client, Qty, Picture, Size, Description
  clientName    String
  clientProject String? // Multiple orders can have same client with different project numbers

  productName String
  quantity    Int     @default(1)
  size        String?
  description String? @db.Text // Allow longer descriptions
  pictureRef  String? // Reference to picture (Picture column from CSV)

  // Materials extracted from description
  materials String[] // Array for easy filtering: ["Solid Wood", "Fabric", "Metal"]

  // CSV: PO/APPROVAL GB, Delivery Date, Delivery Address
  poApprovalDate  DateTime?
  deliveryDate    DateTime?
  deliveryAddress String?

  // Status tracking
  currentStage String      @default("PENDING") // PENDING, METAL, VENEER, ASSY, FINISHING, PACKING, COMPLETED
  status       OrderStatus @default(PENDING)
  priority     Priority    @default(STANDARD)

  // CSV: Process stages with IN/OUT dates
  // METAL/SS
  metalIn  DateTime?
  metalOut DateTime?

  // VENEER
  veneerIn  DateTime?
  veneerOut DateTime?

  // ASSY/RANGKA
  assyIn  DateTime?
  assyOut DateTime?

  // FINISHING
  finishingIn  DateTime?
  finishingOut DateTime?

  // PACKING
  packingIn  DateTime?
  packingOut DateTime?

  // Additional fields
  notes String? @db.Text

  // Relations
  createdById String
  createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientName])
  @@index([deliveryDate])
  @@index([currentStage])
  @@index([status])
  @@map("order")
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum Priority {
  URGENT
  STANDARD
  LOW
}
